




















User access tokens






Hugging Face







					Models

					Datasets

					Spaces

					Docs




			Solutions
		

Pricing
			






Log In
				
Sign Up
					




Hub documentation
			
User access tokens





					Hub
					



Search documentation


EN









ü§ó Hugging Face Hub


Repositories


Getting Started with Repositories


Repository Settings


Pull Requests & Discussions


Notifications


Collections


Webhooks


Repository size recommendations


Next Steps


Licenses


Models


The Model Hub


Model Cards


Gated Models


Uploading Models


Downloading Models


Integrated Libraries


Model Widgets


Inference API docs


Models Download Stats


Frequently Asked Questions


Advanced Topics


Datasets


Datasets Overview


Dataset Cards


Gated Datasets


Uploading Datasets


Downloading Datasets


Integrated Libraries


Dataset Viewer


Datasets Download Stats


Data files Configuration


Spaces


Spaces Overview


Spaces GPU Upgrades


Spaces Persistent Storage


Gradio Spaces


Streamlit Spaces


Static HTML Spaces


Docker Spaces


Embed your Space


Run Spaces with Docker


Spaces Configuration Reference


Sign-In with HF button


Spaces Changelog


Advanced Topics


Other


Organizations


Billing


Security


User Access Tokens


Git over SSH


Signing Commits with GPG


Single Sign-On (SSO)


Malware Scanning


Pickle Scanning


Secrets Scanning


Moderation


Paper Pages


Search


Digital Object Identifier (DOI)


Hub API Endpoints


Sign-In with HF




Join the Hugging Face community
and get access to the augmented documentation experience
		

Collaborate on models, datasets and Spaces
				

Faster examples with accelerated inference
				

Switch between documentation themes
				
Sign Up
to get started
 










   User access tokens  What are User Access Tokens? User Access Tokens are the preferred way to authenticate an application or notebook to Hugging Face services. You can manage your access tokens in your settings.   Access tokens allow applications and notebooks to perform specific actions specified by the scope of the roles shown in the following: read: tokens with this role can only be used to provide read access to repositories you could read. That includes public and private repositories that you, or an organization you‚Äôre a member of, own. Use this role if you only need to read content from the Hugging Face Hub (e.g. when downloading private models or doing inference). write: tokens with this role additionally grant write access to the repositories you have write access to. Use this token if you need to create or push content to a repository (e.g., when training a model or modifying a model card). Note that Organization API Tokens have been deprecated:   If you are a member of an organization with read/write/admin role, then your User Access Tokens will be able to read/write the resources according to the token permission (read/write) and organization membership (read/write/admin).  How to manage User Access Tokens? To create an access token, go to your settings, then click on the Access Tokens tab. Click on the New token button to create a new User Access Token.   Select a role and a name for your token and voil√† - you‚Äôre ready to go! You can delete and refresh User Access Tokens by clicking on the Manage button.    How to use User Access Tokens? There are plenty of ways to use a User Access Token to access the Hugging Face Hub, granting you the flexibility you need to build awesome apps on top of it. User Access Tokens can be: used in place of a password to access the Hugging Face Hub with git or with basic authentication. passed as a bearer token when calling the Inference API. used in the Hugging Face Python libraries, such as transformers or datasets:   Copied from transformers import AutoModel

access_token = "hf_..."

model = AutoModel.from_pretrained("private/model", token=access_token) Try not to leak your token! Though you can always rotate it, anyone will be able to read or write your private repos in the meantime which is üí©  Best practices We recommend you create one access token per app or usage. For instance, you could have a separate token for: A local machine. A Colab notebook. An awesome custom inference server. This way, you can invalidate one token without impacting your other usages. We also recommend only giving the appropriate role to each token you create. If you only need read access (e.g., loading a dataset with the datasets library or retrieving the weights of a model), only give your access token the read role. 


‚ÜêSecurity
Git over SSH‚Üí

User access tokens
What are User Access Tokens?
How to manage User Access Tokens?
How to use User Access Tokens?
Best practices










